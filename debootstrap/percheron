mirror_style main
download_style apt
variants - gnu

work_out_debs () {
    add () { if [ "$ARCH" = "$1" ]; then eval "$2=\"\$$2 $3\""; fi; }
    drop () { 
     if [ "$ARCH" = "$1" ]; then eval "$2=\"\$(without \"\$$2\" \"$3\")\""; fi
    }

    if doing_variant gnu; then
        required="base-files base-passwd ash hostname ifupdown iputils-ping libncurses5 mawk mini-coreutils mini-findutils mini-util-linux ncurses-bin net-tools procps sed sysvinit tar gzip grep debianutils libgcc1 sysv-rc initscripts ifupdown-scripts login netbase dpkg start-stop-daemon miniperl"
    else
        required="base-files base-passwd busybox libgcc1 sysv-rc initscripts ifupdown-scripts netbase dpkg start-stop-daemon miniperl"
    fi

    if [ "$ARCH" = "${ARCH#uclibc}" ]; then
        LIBC6=libc6
        #required="bash-minimal gcc-4.0-base $required $LIBC6"
        required="$required $LIBC6"
    else
        LIBC6=libuclibc0
        required="$required $LIBC6"
    fi
    #if [ "$ARCH" = "alpha" -o "$ARCH" = "ia64" ]; then LIBC6="libc6.1"; fi

    base="libstdc++6 apt"
}

first_stage_install () {
    extract $required

    mkdir -p "$TARGET/var/lib/dpkg" "$TARGET/proc"
    : >"$TARGET/var/lib/dpkg/status"
    : >"$TARGET/var/lib/dpkg/available"

    setup_etc
    if [ ! -e "$TARGET/etc/fstab" ]; then
        echo '# UNCONFIGURED FSTAB FOR BASE SYSTEM' > "$TARGET/etc/fstab"
        chown 0.0 "$TARGET/etc/fstab"; chmod 644 "$TARGET/etc/fstab"
    fi

    setup_devices

    x_feign_install () {
        local pkg="$1"
        local deb="$(debfor $pkg)"
        local ver="$(
            ar -p "$TARGET/$deb" control.tar.gz | zcat |
                tar -O -xf - control ./control 2>/dev/null |
                sed -ne 's/^Version: *//Ip' | head -n 1
        )"

        mkdir -p "$TARGET/var/lib/dpkg/info"

        echo \
"Package: $pkg
Version: $ver
Status: install ok installed" >> "$TARGET/var/lib/dpkg/status"

        touch "$TARGET/var/lib/dpkg/info/${pkg}.list"
    }

    x_feign_install dpkg
}

second_stage_install () {
    x_core_install () {
	smallyes '' | in_target dpkg --force-depends --install $(debfor "$@")
    }

    p () {
	baseprog="$(($baseprog + ${1:-1}))"
    }

    setup_proc_fakechroot
    if [ ! -f "$TARGET/sbin/ldconfig" ]; then
        echo "WARNING: there should be /sbin/ldconfig in newer versions of libuclibc0"
        echo "         Please update your repository"
        cat <<EOF >> "$TARGET/sbin/ldconfig"
#!/bin/sh
echo "Fake ldconfig for an uclibc system"
exit 0
EOF
        chmod 755 "$TARGET/sbin/ldconfig"
    else
        in_target /sbin/ldconfig
    fi
    
    if [ ! -f "$TARGET/sbin/start-stop-daemon" ]; then
        cat <<EOF >> "$TARGET/sbin/start-stop-daemon"
#!/bin/sh
echo "Fake start-stop-daemon for system bootstrap"
exit 0
EOF
        chmod 755 "$TARGET/sbin/start-stop-daemon"
    fi

    DEBIAN_FRONTEND=noninteractive
    export DEBIAN_FRONTEND

    baseprog=0
    bases=40

    p; progress $baseprog $bases INSTBASE "Installing base system" #1
    info INSTCORE "Installing core packages..."

    p; progress $baseprog $bases INSTBASE "Installing base system" #2
    x_core_install libgcc1 $LIBC6

    #ln -fs mawk $TARGET/usr/bin/awk
    if doing_variant gnu; then
        x_core_install mini-coreutils miniperl
        x_core_install dpkg
        x_core_install ash mawk mini-findutils sed tar gzip grep debianutils
    else
        x_core_install busybox
    fi
    x_core_install base-files base-passwd
    p; progress $baseprog $bases INSTBASE "Installing base system" #3
    x_core_install sysv-rc initscripts ifupdown-scripts netbase

    p; progress $baseprog $bases INSTBASE "Installing base system" #4

    info UNPACKREQ "Unpacking required packages..."

    p; progress $baseprog $bases INSTBASE "Installing base system" #8
    smallyes '' | repeat 5 in_target_failmsg UNPACK_REQ_FAIL_FIVE "Failure while unpacking required packages.  This will be attempted up to five times." "" dpkg --force-depends --unpack $(debfor $required)
    p 10; progress $baseprog $bases INSTBASE "Installing base system" #18

    info CONFREQ "Configuring required packages..."

    mv "$TARGET/sbin/start-stop-daemon" "$TARGET/sbin/start-stop-daemon.REAL"
    echo \
    "#!/bin/sh
    echo
    echo \"Warning: Fake start-stop-daemon called, doing nothing\"" > "$TARGET/sbin/start-stop-daemon"
    chmod 755 "$TARGET/sbin/start-stop-daemon"

    setup_dselect_method apt

    p; progress $baseprog $bases INSTBASE "Installing base system" #19
    smallyes '' | in_target_failmsg CONF_REQ_FAIL "Failure while configuring required packages." "" dpkg --configure --pending --force-configure-any --force-depends
    p 10; progress $baseprog $bases INSTBASE "Installing base system" #29 

    info INSTBASE "Installing base packages..."

    p; progress $baseprog $bases INSTBASE "Installing base system" #30
    smallyes '' | repeat 5 in_target_failmsg INST_BASE_FAIL_FIVE "Failure while installing base packages.  This will be re-attempted up to five times." "" dpkg --force-auto-select --force-overwrite --force-confold --skip-same-version --unpack $(debfor $base)

    smallyes '' | repeat 5 in_target_failmsg CONF_BASE_FAIL_FIVE "Failure while configuring base packages.  This will be attempted 5 times." "" dpkg  --force-confold --skip-same-version  --configure -a

    p 9; progress $baseprog $bases INSTBASE "Installing base system" #39

    mv "$TARGET/sbin/start-stop-daemon.REAL" "$TARGET/sbin/start-stop-daemon"

    progress $bases $bases INSTBASE "Installing base system" #40
    info BASESUCCESS "Base system installed successfully."
}

# original version of this function hardcodes COMPONENTS=main
download_main_indices () {
  local m1=${MIRRORS%% *}
  progress 0 100 DOWNMAINPKGS "Downloading Packages file"
  progress_next 100
  COMPONENTS="`echo $USE_COMPONENTS | sed 's/|/ /'`"
  export COMPONENTS
  for m in $MIRRORS; do
    for c in $COMPONENTS; do
      local path="dists/$SUITE/$c/binary-$ARCH/Packages"
      local pkgdest="$TARGET/$($DLDEST pkg $SUITE $c $ARCH $m $path)"
      if [ -x /bin/gunzip ] && get "$m/${path}.gz" "${pkgdest}.gz"; then
        rm -f ${pkgdest}
        gunzip ${pkgdest}.gz
      elif get "$m/$path" "$pkgdest"; then
        true
      fi
    done
  done
  progress 100 100 DOWNMAINPKGS "Downloading Packages file"
}
