#!/bin/bash

SUITES="clydesdale percheron attic"
DEVSUITE="clydesdale"
COMPONENTS="broken host-tools core gui security debug"

SLIND_CONFIG=~/.slind-config
if [ -f $SLIND_CONFIG ]; then
	. $SLIND_CONFIG
else
	echo "Can't open $SLIND_CONFIG"
	exit 1
fi
ARCHES="arm powerpc i386 mips mipsel sh4 uclibc-arm uclibc-powerpc uclibc-i386 uclibc-mips uclibc-mipsel uclibc-sh4 sh4a uclibc-sh4a"
REPODIR="$GRASP_REPO"
[ -n "$REPODIR" ] || REPODIR="$HOME/grasp-out"

LIBRARY=/usr/lib/slind-core/libpoolcare.sh
if [ -f "$LIBRARY" ]; then
	. $LIBRARY
else
	echo "Error: can't load library $LIBRARY"
	exit 1
fi

# prepare for scanning
prologue() {
	if [ ! -f "$OVERRIDES_DB" ]; then
		mkdir -p "$IDXDIR"
		touch "$OVERRIDES_DB"
		mkoverrides
	fi

	for _s in $SUITES; do
		for _c in $COMPONENTS; do
			if [ ! -d "$DISTSDIR/$_s/$_c/source" ]; then
				mkdir -p "$DISTSDIR/$_s/$_c/source"
			fi
			: > "$DISTSDIR/$_s/$_c/source/Sources"
			gzip -c9 < "$DISTSDIR/$_s/$_c/source/Sources" \
				> "$DISTSDIR/$_s/$_c/source/Sources.gz"

			for _a in $ARCHES; do
				if [ ! -d "$DISTSDIR/$_s/$_c/binary-$_a" ]; then
					mkdir -p "$DISTSDIR/$_s/$_c/binary-$_a"
				fi
				: > "$DISTSDIR/$_s/$_c/binary-$_a/Packages"
				gzip -c9 \
					< "$DISTSDIR/$_s/$_c/binary-$_a/Packages"\
					> "$DISTSDIR/$_s/$_c/binary-$_a/Packages.gz"
			done
		done
	done
}

# Process a .dsc file.
# $1 -- path to .dsc file
# This is a do-it-all function for one source package.
scan_just_one_dsc() {
	local _dscfile="$1"
	local _path_list
	local _path
	local _result

	local _pkgname="`grep '^Source: ' $_dscfile | cut -d' ' -f2`"
	local _pkgver="`grep '^Version: ' $_dscfile | cut -d' ' -f2`"
	local _pkgcomp="`grep '^Section: ' $_dscfile | cut -d' ' -f2`"

	[ -n "$_pkgcomp" ] || _pkgcomp='broken'
	echo $COMPONENTS | egrep "(^| )$_pkgcomp( |\$)" >/dev/null || _pkgcomp='broken'

	# check with overrides db
	_path_list=`override_get_src_poolpath_list $_pkgname $_pkgver`
	if [ -z "$_path_list" ]; then
		_result=`override_try_add_package $_pkgname $_pkgver $DEVSUITE $_pkgcomp`
		if [ "$_result" != "OK" ]; then  
			yell "WARNING: cannot add source package $_pkgname=$_pkgver in" -n
			yell "overrides table, ignore this package for now"
			return
		fi
		_path_list=`override_get_src_poolpath_list $_pkgname $_pkgver`
		if [ -z "$_path_list" ]; then
			yell "WARNING: can't index source package $_pkgname=$_pkgver"
			return
		fi
	fi

	for _path in $_path_list; do
		# write a source entry to Sources file
		dsc_to_Sources "$_dscfile" "$_path"
	done
}

scan_all_dsc() {
	pushd $REPODIR > /dev/null

	find "$POOLDIR" -type f -name '*.dsc' | while read _dscfile; do
		scan_just_one_dsc "$_dscfile"
	done

	popd > /dev/null
}

scan_all_deb() {
	local _suite
	local _index_arch
	local _debfile

	$SQLCMD "DELETE FROM binary_cache"

	find "$POOLDIR" -type f -name "*.deb" | while read _debfile; do
		# dirty hack, will fix later
		_suite=`dirname $_debfile`
		_suite=`basename $_suite`

		deb_cache "$_debfile" "$_suite" > /dev/null
	done

	for _suite in $SUITES; do
		for _index_arch in $ARCHES; do
			make_Packages "$_suite" "$_index_arch"
		done
	done
}

for suite in $SUITES; do
	result=`override_check_suite $suite`
	if [ "$result" != "OK" -a "$suite" != "attic" ]; then
		yell "POOLCARE ERROR: Broken suite '$suite', fix it and try again"
		exit
	fi
done
prologue
scan_all_dsc
scan_all_deb
