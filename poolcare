#!/bin/bash

SUITES="clydesdale percheron attic"
DEVSUITE="clydesdale"
COMPONENTS="host-tools core gui security debug"
ARCHES="arm powerpc i386 mips mipsel sh4 uclibc-arm uclibc-powerpc uclibc-i386 uclibc-mips uclibc-mipsel uclibc-sh4 sh4a uclibc-sh4a"

SLINDJOB_CONFIG=~/.slindjob-config
if [ -f $SLINDJOB_CONFIG ]; then
	. $SLINDJOB_CONFIG
else
	echo "Can't open $SLINDJOB_CONFIG"
	exit 1
fi
REPODIR="$POOL_DIR"

LIBRARY=/usr/lib/slind-core/libpoolcare.sh
if [ -f "$LIBRARY" ]; then
	. $LIBRARY
else
	echo "Error: can't load library $LIBRARY"
	exit 1
fi

# prepare for scanning
prologue() {
	if [ ! -f "$OVERRIDES_DB" ]; then
		mkdir -p "$IDXDIR"
		touch "$OVERRIDES_DB"
		mkoverrides
	fi

	for _s in $SUITES; do
		for _c in $COMPONENTS; do
			if [ ! -d "$DISTSDIR/$_s/$_c/source" ]; then
				mkdir -p "$DISTSDIR/$_s/$_c/source"
			fi
			: > "$DISTSDIR/$_s/$_c/source/Sources"
			gzip -c9 < "$DISTSDIR/$_s/$_c/source/Sources" \
				> "$DISTSDIR/$_s/$_c/source/Sources.gz"

			for _a in $ARCHES; do
				if [ ! -d "$DISTSDIR/$_s/$_c/binary-$_a" ]; then
					mkdir -p "$DISTSDIR/$_s/$_c/binary-$_a"
				fi
				: > "$DISTSDIR/$_s/$_c/binary-$_a/Packages"
				gzip -c9 \
					< "$DISTSDIR/$_s/$_c/binary-$_a/Packages"\
					> "$DISTSDIR/$_s/$_c/binary-$_a/Packages.gz"
			done
		done
	done
}

# Process a .dsc file.
# $1 -- path to .dsc file
# This is a do-it-all function for one source package.
scan_just_one_dsc() {
	local _dscfile="$1"
	local _path_list
	local _path

	local _pkgname="`grep '^Source: ' $_dscfile | cut -d' ' -f2`"
	local _pkgver="`grep '^Version: ' $_dscfile | cut -d' ' -f2`"

	# check with overrides db
	_path_list=`override_get_src_poolpath_list $_pkgname $_pkgver`

	if [ -n "$_path_list" ]; then
		for _path in $_path_list; do
			# write a source entry to Sources file
			dsc_to_Sources "$_dscfile" "$DISTSDIR/$_path/source"
		done
	else
		yell "WARNING: cannot find source package $_source=$_version in" -n
		yell "overrides table, ignore this package for now"
	fi
}

scan_all_dsc() {
	pushd $REPODIR > /dev/null

	find "$POOLDIR" -type f -name '*.dsc' | while read _dscfile; do
		scan_just_one_dsc "$_dscfile"
	done

	popd > /dev/null
}

scan_just_one_deb() {
	local _debfile="$1"
	local _paths="`get_deb_distpath $_debfile`"

	for _path in $_paths; do
		_pkgspath="dists/$_path"
		_pkgsfile="$_pkgspath/Packages"
		deb_to_Packages "$_debfile" "$_pkgspath"
	done
}

scan_all_deb() {
	pushd $REPODIR > /dev/null

	find "$POOLDIR" -type f -name "*.deb" | while read _debfile; do
		scan_just_one_deb "$_debfile"
	done

	popd > /dev/null
}

prologue
scan_all_dsc
scan_all_deb

