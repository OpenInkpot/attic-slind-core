#!/bin/sh

#
# This tool is a main interface to Slind for users and developers. So, it has
# two main modes of operation, user and maintainer. The following commands are
# provided for user:
#
# setup
#   Create Slind chroot and install toolchains for selected architectures
#   ($target_arch variable in slind-config.ini); all will be done from existing
#   binary packages and repositories, configured in your /etc/apt/sources.list
#   (make sure that Slind is there)
#
# bootstrap
#   Create target root filesystems for $target_arch from binary packages,
#   provided in Slind repository
#
# chroot
#   Change to Slind environment - simply execute chroot with correct user and
#   required configuration options; this option also might take a command to be
#   executed inside chroot as an argument.
#
# Simple interface is also provided for Slind maintainers to perform regular
# tasks, such as rebuilding a list of architectures from git and creating of
# Slind repository:
#
# maintainer-setup
#   Create empty Slind chroot environment (regular Debian etch at the time of
#   writting), normally only plain Debian packages are needed for it
#
# maintainer-build-init
#   Fetch all sources from Slind git; fetch all source tarballs; create source
#   deb's out of it; build toolchains for $target_arch; build all binary
#   packages for $target_arch; create brand new local Slind repository from it
# 
# maintainer-build
#   Same as above, but use source packages from Slind pool instead.
#

#set -x

# Another die implementation
die() {
	error_msg="$@"
	echo "E: $error_msg" >&2
	exit 2
}

LIBUTILS=/usr/lib/slind-core/libutils.sh

[ -f "$LIBUTILS" ] || die "can't load library $LIBUTILS"
. $LIBUTILS

load_slind_config_common
load_slind_config_maintainer_common
load_suites_config

LIBRARY=/usr/lib/slind-core/libpoolcare.sh

[ -f "$LIBRARY" ] || die "can't load library $LIBRARY"
. $LIBRARY

TARGET_ARCHES=`conf_get_var_strict $SLIND_CONFIG target target_arch`
HOSTARCH=`dpkg --print-architecture`
TAR_OPTS="--exclude CVS --exclude .svn --exclude .git --exclude _darcs"

TOOLCHAIN_LIST="i386-toolchain"

# List of toolchains that should be installed inside chroot.
for _a in $TARGET_ARCHES; do
	TOOLCHAIN_LIST="$TOOLCHAIN_LIST ${_a}-cross-toolchain"
done

# list of basic target packages
BASE_TGT_PKG_LIST=`conf_get_var_strict $SLIND_CONFIG slindctl base_tgt_pkg_list`

# list of host packages that we need to install before
# we can even run package builder
BASE_HST_PKG_LIST=`conf_get_var_strict $SLIND_CONFIG slindctl base_hst_pkg_list`
BASE_HST_PKG_LIST="$BASE_HST_PKG_LIST $TOOLCHAIN_LIST"

# Build-depends for maintainers
BASE_HST_MAINT_PKG_LIST=`conf_get_var_strict $SLIND_CONFIG slindctl base_hst_maint_pkg_list`

# Broken packages will be excluded from BASE_HST_PKG_LIST
BROKEN_HST_PKG_LIST=`conf_get_var_relaxed $SLIND_CONFIG slindctl broken_hst_pkg_list`

# Number of retries for apt (to overcome network failures).
APT_RETRIES_MAX=`conf_get_var_relaxed $SLIND_CONFIG common apt_retries_max`

# rebuild PKGLIST ignoring packages from BROKEN_HST_PKG_LIST, move ingnored packages to SKIP_LIST
tmp_LIST=""
SKIP_LIST=""
for _pkg in $BASE_HST_PKG_LIST; do
	# check the package presense in BROKEN_HST_PKG_LIST 
	echo $BROKEN_HST_PKG_LIST | egrep "\<$_pkg\>" > /dev/null
	if [ "$?" -eq 0 ]; then
		SKIP_LIST="$SKIP_LIST $_pkg"
	else
		tmp_LIST="$tmp_LIST $_pkg"
	fi
done
BASE_HST_PKG_LIST="$tmp_LIST"

[ -n "$HTTP_PROXY_URL" ] && PROXYENV="http_proxy=$HTTP_PROXY_URL"
[ -n "$FTP_PROXY_URL" ]  && PROXYENV="$PROXYENV ftp_proxy=$FTP_PROXY_URL"

CHROOTENV="env $PROXYENV $CHROOTENV"

CHROOTCMD_BUILD="$ROOT_CMD chroot $WORK_DIR $CHROOTENV su - build -c"
CHROOTCMD_ROOT="$ROOT_CMD chroot $WORK_DIR $CHROOTENV /bin/sh -c"

# hook functions
[ -n "$PRE_SLINDJOB_HOOK" ]  || PRE_SLINDJOB_HOOK=empty_hook
[ -n "$POST_SLINDJOB_HOOK" ] || POST_SLINDJOB_HOOK=empty_hook

empty_hook() {
	true
}

# hackaround for the case of non-existing locales
export LC_ALL=C

# some shells don't export UID variable
if [ -z "$UID" ]; then
       UID=`id -u`
fi

# Before we start, check if WORK_DIR is absolute.
# That's a quite stupid test, in fact -- the path may start with "/", 
# but contain ".." and so on. However, as it does not exist yet, we can't
# use realpath.
_wd=`echo $WORK_DIR | cut -c1`
if [ "x$_wd" != "x/" ]; then
    echo "work_dir path in your configuration is not absolute."
    exit 1
fi

# 1. bootstrap building environment
dev_bootstrap() {
	echo "=== dev_bootstrap ==="
	$ROOT_CMD $CHROOTENV debootstrap --variant=buildd $DEBIAN_SUITE $WORK_DIR $DEBIAN_MIRROR
	if [ "$?" != "0" ]; then
		echo "Failed to bootstrap $DEBIAN_SUITE from $DEBIAN_MIRROR to $WORK_DIR"
		exit 1
	fi

	# make env variables available in chroot environment
	if [ -n "$CHROOTENV" ]; then
		$CHROOTCMD_ROOT "echo \"export $CHROOTENV\" >> /etc/profile"
	fi
}

# 1.1. create a user for building
add_user() {
	echo "=== add_user ==="
	if ! grep -q build $WORK_DIR/etc/passwd; then
		$CHROOTCMD_ROOT "/usr/sbin/adduser --home /build --uid $UID --disabled-password --disabled-login --gecos 'Slind build user' build"
		# 4.6. configure sudo
		$CHROOTCMD_ROOT "su - -c \"echo 'build ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\""
		# Add directory to store slind configuration files
		$CHROOTCMD_BUILD "mkdir -p /build/.slind"
	fi
}

# 1.2. copy whole slind-core inside chroot
copy_slind_core() {
	# I know that it's bad, since it ties us up to Debian on host system.
	# OTOH, all other solutions, such as copying poolcare and debootstrap
	# scripts, are much worse.
	# I still think it's a neat idea to copy slind-core installation as a
	# whole. On Debian, dpkg-repack suits this need. On Gentoo/RPM/FOO-based
	# distro, other solutions should be employed. Anyone?
	# In short, FIXME.
	local _dir
	local _depends
	local _tmpfile1
	local _tmpfile2

	echo "=== copy_slind_core ==="

	# Are there any local configuration files?
	if [ -f "$SLIND_USR_CONFIG" ]; then
	    # Let's just copy it over there inside chroot.
	    $ROOT_CMD cp $SLIND_USR_CONFIG $WORK_DIR/etc/slind/
	fi
	
	if [ -f "$SLIND_USR_SUITES_CONFIG" ]; then
	    # Let's just copy it over there inside chroot.
	    $ROOT_CMD cp $SLIND_USR_SUITES_CONFIG $WORK_DIR/etc/slind/
	fi
}

# 1.5. configure target
configure_target() {
	echo "=== configure_target ==="
	$ROOT_CMD cp /etc/hosts $WORK_DIR/etc/hosts	
}

# 2. copy tools inside
copy_tools() {
	if [ "${SLIND_MIRROR#http*:}" = "$SLIND_MIRROR" -a "${SLIND_MIRROR#ftp:}" = "$SLIND_MIRROR" ]; then
	        echo "Copying local SLIND mirror ($SLIND_MIRROR) to $WORK_DIR/SLIND"
		SLIND_MIRROR_DIR=${SLIND_MIRROR#file://}
		$ROOT_CMD mkdir -p $WORK_DIR/SLIND
		( cd $SLIND_MIRROR_DIR; tar $TAR_OPTS -c * ) | \
			$ROOT_CMD tar xf - -C $WORK_DIR/SLIND
	        # Since SLIND_MIRROR is used inside our working chroot, and we
		# determined we're using a local directory, override
		# SLIND_MIRROR with a path _inside_ chroot.
	        SLIND_MIRROR="file:///SLIND"
	fi
}

# 3. configure apt
configure_apt() {
	local _tmpfile
	local _comp
	local _host_comp
	local _suite_host_comp

	_tmpfile=`mktemp` || {
	    yell "ERROR: can't create temporary file"
	    exit 1
	}

	chmod 644 $_tmpfile

	load_suites_config $SLIND_SUITE

	echo "=== configure_apt ==="
	echo "deb $DEBIAN_MIRROR $DEBIAN_SUITE main" > $_tmpfile
	echo "deb $SLIND_MIRROR $SLIND_SUITE $HOST_COMPONENTS" >> $_tmpfile
	echo "deb-src $SLIND_MIRROR $SLIND_SUITE $COMPONENTS" >> $_tmpfile

	$ROOT_CMD mv $_tmpfile $WORK_DIR/etc/apt/sources.list
	$CHROOTCMD_ROOT "apt-get update"
}

configure_apt_debian() {
	echo "=== configure_apt_debian ==="
	echo "deb $DEBIAN_MIRROR $DEBIAN_SUITE main" > sources.list
	echo "deb-src $SLIND_MIRROR $SLIND_SUITE $COMPONENTS" >> sources.list

	$ROOT_CMD mv sources.list $WORK_DIR/etc/apt/sources.list
	$CHROOTCMD_ROOT "apt-get update"
}

configure_apt_init() {
	local _tmpfile
	_tmpfile=`mktemp` || {
	    yell "ERROR: can't create temporary file"
	    exit 1
	}
	chmod 644 $_tmpfile
	echo "=== configure_apt_init ==="
	echo "deb $DEBIAN_MIRROR $DEBIAN_SUITE main" > $_tmpfile
	echo "deb file://$CHR_REPODIR $SLIND_SUITE host-tools" >> $_tmpfile
	echo "deb-src file://$CHR_REPODIR $SLIND_SUITE $COMPONENTS" >> $_tmpfile

	$ROOT_CMD mv $_tmpfile $WORK_DIR/etc/apt/sources.list
	set +e
	$CHROOTCMD_ROOT "apt-get update"
	set -e
}

# 4. install necessary packages
dev_install() {
	local _count=0
	echo "=== dev_install ==="
	while true; do
		$CHROOTCMD_ROOT "apt-get install --yes --force-yes $*" && break
		if [ "$((_count++))" = "$APT_RETRIES_MAX" ]; then
			yell "W: apt failed $APT_RETRIES_MAX times in a row, it's not supposed to succeed now"
			break
		fi
	done
	$CHROOTCMD_ROOT "apt-get clean"
}

# 4.6. configure grasp and friends
configure_tools() {
	GRASP_CONFIG="$WORK_DIR/build/.grasp"
	: > $GRASP_CONFIG
	echo "gitbase_url $GITBASE_URL"       >> $GRASP_CONFIG
	echo "gitrepos_dir $CHR_GITREPOS_DIR" >> $GRASP_CONFIG
	echo "tarballs_dir $CHR_TARBALLS_DIR" >> $GRASP_CONFIG
	echo "reget_grasp yes"                >> $GRASP_CONFIG
	echo "output_dir $CHR_REPODIR"        >> $GRASP_CONFIG
	echo "repo_format 2"                  >> $GRASP_CONFIG
}

# 5. bootstrap i386 rootfs
bootstrap_host() {
	local _debootstrap_script

	echo "=== bootstrap host ==="

	_debootstrap_script=/usr/lib/slind-core/debootstrap/$SLIND_SUITE

	if [ ! -f $WORK_DIR/$_debootstrap_script ]; then
	    yell "ERROR: can't find debootstrap script for $SLIND_SUITE at $_debootstrap_script"
	    exit 1
	fi

	$ROOT_CMD mkdir -p $WORK_DIR/rootfs-$HOSTARCH
	$CHROOTCMD_ROOT "debootstrap --components=core $SLIND_SUITE /rootfs-$HOSTARCH $SLIND_MIRROR $_debootstrap_script"

	# suid ldconfig binary, otherwise we won't be able to run it as build
	# user inside chroot.
	$ROOT_CMD chmod u+s $WORK_DIR/rootfs-$HOSTARCH/sbin/ldconfig
}

# 6. bootstrap $ARCH rootfs
bootstrap_target() {
	echo "=== bootstrap_target ==="

	local ARCH
	local _target_apt

	_target_apt=`conf_get_var_relaxed $SLIND_CONFIG target addon_packages`

	local _archcpu=`dpkg-architecture -f -a$ARCH -qDEB_HOST_GNU_CPU 2>/dev/null`
	local _hostcpu=`dpkg-architecture -f -a$HOSTARCH -qDEB_HOST_GNU_CPU 2>/dev/null`

	for ARCH in $TARGET_ARCHES; do
		$ROOT_CMD mkdir -p $WORK_DIR/rootfs-$ARCH
		$ROOT_CMD chown -R $UID:$UID $WORK_DIR/rootfs-$ARCH

		$CHROOTCMD_BUILD "cross-shell bs $ARCH"
		if [ -n "$_target_apt" ]
		then
			$CHROOTCMD_BUILD "cross-shell sh $ARCH apt-get update"
			$CHROOTCMD_BUILD "cross-shell sh $ARCH apt-get install --yes --force-yes $_target_apt"
			$CHROOTCMD_BUILD "cross-shell sh $ARCH apt-get clean"
		fi
		$CHROOTCMD_BUILD "cross-shell pack $ARCH"
	done
}

get_overrides_db() {
	if ! [ -f "$WORK_DIR/$CHR_REPODIR/indices/overrides.db" ]
	then
		mkdir -p $WORK_DIR/$CHR_REPODIR/indices/
		curl -f $SLIND_MIRROR/indices/overrides.db -o \
			$WORK_DIR/$CHR_REPODIR/indices/overrides.db ||
		die "downloading of $SLIND_MIRROR/indices/overrides.db failed"
	fi
}

git_build() {
	local pkgname="$1"
	local tmp=`$CHROOTCMD_BUILD "mktemp -d -t build_$pkgname.XXXXXX"`
	$CHROOTCMD_BUILD "$CHROOTENV git-clone ${GITBASE_URL}/$pkgname.git $tmp/$pkgname"
	$CHROOTCMD_BUILD "cd $tmp/$pkgname && fakeroot ./debian/rules binary"
	$CHROOTCMD_ROOT "cd $tmp/ && dpkg -i \`cut -f 1 -d' ' < $pkgname/debian/files\`"
	rm -rf $WORK_DIR/$tmp
}

refresh_pool() {
	$CHROOTCMD_BUILD "slindak -r $CHR_REPODIR -F"
	$CHROOTCMD_ROOT "$CHROOTENV apt-get update" || die "Couldn't update apt lists"
}

case "$1" in
	setup)
		[ -n "$SKIP_LIST" ] && echo "WARNING!!! Skipping broken packages: $SKIP_LIST" >&2
		dev_bootstrap
		configure_target
		copy_tools
		configure_apt
		dev_install $BASE_HST_PKG_LIST
		add_user
		copy_slind_core
		configure_tools
		;;
	bootstrap)
		bootstrap_host
		bootstrap_target
		;;
	chroot)
		if [ -z "$2" ]; then
		    $CHROOTCMD_BUILD "$CHROOTENV /bin/sh"
		else
		    shift
		    $CHROOTCMD_BUILD "$CHROOTENV /bin/sh -c '$*'"
		fi
		;;
	maintainer-setup)
		dev_bootstrap
		configure_target
		configure_apt_debian
		# To have only etch config, so SLIND pool breakage does not
		# affect maintainer-setup
		dev_install $BASE_HST_MAINT_PKG_LIST
		add_user
		copy_tools
		configure_tools
		# Now we have full APT config.
		configure_apt
		;;
	maintainer-build|maintainer-build-init)
		$PRE_SLINDJOB_HOOK
		set -e
		get_overrides_db
		case $1 in
			maintainer-build)
				$CHROOTCMD_ROOT "$CHROOTENV apt-get --yes --force-yes install slindak grasp slind-maintainer-core dpkg dpkg-dev"
			;;
			maintainer-build-init)
				configure_apt_init
				git_build slindak
				git_build grasp
				git_build slind-core
				git_build dpkg
			;;
		esac
##		refresh_pool is commented because slindak doesn't handle empty repos vell
##		refresh_pool
		copy_slind_core
		$CHROOTCMD_BUILD "$CHROOTENV slindjob"
		$CHROOTCMD_ROOT "$CHROOTENV apt-get update"
		set +e
		$POST_SLINDJOB_HOOK
		;;
	*)
		echo "Usage: `basename $0` {setup|bootstrap|chroot|maintainer-setup|maintainer-build}"
		exit 1
		;;
esac
