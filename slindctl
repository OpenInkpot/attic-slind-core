#!/bin/sh

CONFIG_FILE=~/.slind-config
if [ ! -f $CONFIG_FILE ]; then
	echo "Config file $CONFIG_FILE not found, creating one for you."
	cp /etc/slind/slind-config $CONFIG_FILE
fi

. $CONFIG_FILE

CHROOTCMD="$ROOTCMD chroot $TARGET su - build -c"
HOSTARCH=`dpkg --print-architecture`
TAR_OPTS="--exclude CVS --exclude .svn --exclude .git --exclude _darcs"

TOOLCHAIN_LIST="i386-toolchain"
for _a in $ARCHES; do
	TOOLCHAIN_LIST="$TOOLCHAIN_LIST ${_a}-cross-toolchain"
done

# list of basic target packages
BASEPKGLIST="base-files base-passwd busybox sysvinit ifupdown netbase dpkg miniperl apt"
# list of host packages that we need to install before
# we can even run package builder
PKGLIST="dpkg dpkg-dev dpkg-cross northern-cross $TOOLCHAIN_LIST toolchain-package debootstrap adduser libglib2.0-dev fakechroot cross-shell debhelper"
MAINTAINER_PKGLIST="sudo adduser realpath lsb-release flex sqlite3 dpatch cdbs quilt git-core debhelper debootstrap fakeroot pkg-config autoconf2.13 automake1.7 zlib1g-dev libncurses5-dev libcurl3-dev libpopt-dev docbook-to-man texi2html texinfo curl"


BROKEN_LIST="cross-shell i386-toolchain arm-cross-toolchain sh4a-cross-toolchain uclibc-arm-cross-toolchain"

# rebuild PKGLIST ignoring packages from BROKEN_LIST, move ingnored packages to SKIP_LIST
tmp_LIST=""
SKIP_LIST=""
for _pkg in $PKGLIST; do
	# check the package presense in BROKEN_LIST 
	echo $BROKEN_LIST | egrep "\<$_pkg\>" > /dev/null
	if [ "$?" -eq 0 ]; then
		SKIP_LIST="$SKIP_LIST $_pkg"
	else
		tmp_LIST="$tmp_LIST $_pkg"
	fi
done
PKGLIST="$tmp_LIST"

# These all should be overrideable from configuration files
# See grasp documentation for the actual meaning of those.
[ -n "$GITBASE_URL" ]  || GITBASE_URL="http://git.slind.org/gitrepos/"
[ -n "$GITREPOS_DIR" ] || GITREPOS_DIR="/build/grasp-repos"
[ -n "$TARBALLS_DIR" ] || TARBALLS_DIR="/build/grasp-tarballs"
[ -n "$GRASP_REPO" ]   || GRASP_REPO="/build/grasp-out"

# hook functions
[ -n "$PRE_SLINDJOB_HOOK" ]  || PRE_SLINDJOB_HOOK=empty_hook
[ -n "$POST_SLINDJOB_HOOK" ] || POST_SLINDJOB_HOOK=empty_hook

empty_hook() {
	true
}

# hackaround for the case of non-existing locales
export LC_ALL=C

# some shells don't export UID variable
if [ -z "$UID" ]; then
       UID=`id -u`
fi

# 1. bootstrap building environment
dev_bootstrap() {
	echo "=== dev_bootstrap ==="
	$ROOTCMD debootstrap --variant=buildd $DEBSUITE $TARGET $MIRROR
	if [ "$?" != "0" ]; then
		echo "Failed to bootstrap $DEBSUITE from $MIRROR to $TARGET"
		exit 1
	fi
}

# 1.5. configure target
configure_target() {
	echo "=== configure_target ==="
	$ROOTCMD cp /etc/hosts $TARGET/etc/hosts	
}

# 2. copy tools inside
copy_tools() {
	if [ "${SLIND_REPO#http*:}" = "$SLIND_REPO" -a "${SLIND_REPO#ftp:}" = "$SLIND_REPO" ]; then
	        echo "Copying local SLIND repos ($SLIND_REPO) to $TARGET/SLIND"
		SLIND_REPO=${SLIND_REPO#file://}
		$ROOTCMD mkdir -p $TARGET/SLIND
		( cd $SLIND_REPO; tar -c * $TAR_OPTS ) | \
			$ROOTCMD tar xf - -C $TARGET/SLIND
	        # for the chroot environment, the tools are now in /tools
	        SLIND_REPO="file:///SLIND"
	fi
}

# 3. configure apt
configure_apt() {
	echo "=== configure_apt ==="
	echo "deb $MIRROR $DEBSUITE main" > sources.list
	echo "deb $SLIND_REPO $SUITE host-tools" >> sources.list
	echo "deb-src $SLIND_REPO $SUITE host-tools core gui security debug" >> sources.list

	$ROOTCMD mv sources.list $TARGET/etc/apt/sources.list
	$ROOTCMD chroot $TARGET apt-get update
}

# 4. install necessary packages
dev_install() {
	echo "=== dev_install ==="
	$ROOTCMD chroot $TARGET apt-get install --yes --force-yes $@
	$ROOTCMD chroot $TARGET apt-get clean
}

# 4.5. create a user for building
add_user() {
	echo "=== add_user ==="
	if ! grep -q build $TARGET/etc/passwd; then
		$ROOTCMD chroot $TARGET /usr/sbin/adduser --home /build --uid $UID --disabled-password --disabled-login --gecos 'Build user' build
		# 4.6. configure sudo
		$ROOTCMD chroot $TARGET su - -c "echo 'build ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"
	fi
}

# 4.6. configure grasp and friends
configure_tools() {
	GRASP_CONFIG="$TARGET/build/.grasp"
	: > $GRASP_CONFIG
	echo "gitbase_url $GITBASE_URL"   >> $GRASP_CONFIG
	echo "gitrepos_dir $GITREPOS_DIR" >> $GRASP_CONFIG
	echo "tarballs_dir $TARBALLS_DIR" >> $GRASP_CONFIG
	echo "reget_grasp yes"            >> $GRASP_CONFIG
	echo "output_dir $GRASP_REPO"     >> $GRASP_CONFIG
	echo "repo_format 2"              >> $GRASP_CONFIG
}

# 6. bootstrap i386 rootfs
bootstrap_host() {
	echo "=== bootstrap host ==="
	[ -f $TARGET/slind/$SUITE ] || $ROOTCMD cp ./$SUITE $TARGET/slind
	$ROOTCMD mkdir -p $TARGET/rootfs-$HOSTARCH
	$ROOTCMD chroot $TARGET debootstrap $SUITE /rootfs-$HOSTARCH $SLIND_REPO /slind/$SUITE
	$ROOTCMD chmod u+s $TARGET/rootfs-$HOSTARCH/sbin/ldconfig
}

# 7. bootstrap $ARCH rootfs
bootstrap_target() {
	echo "=== bootstrap_target ==="

	local ARCH

	for ARCH in $ARCHES; do
		$ROOTCMD mkdir -p $TARGET/rootfs-$ARCH
		$ROOTCMD sed -ie "s/^ARCH=.*$/ARCH=$ARCH/" $TARGET/etc/cross-shell.conf
		$ROOTCMD sed -ie "s,^REPO=.*$,REPO=$SLIND_REPO," $TARGET/etc/cross-shell.conf
		$ROOTCMD chown -R $UID:$UID $TARGET/rootfs-$ARCH
		$CHROOTCMD "cross-shell bs"
		$CHROOTCMD "cross-shell apt $TARGET_APT"
		$CHROOTCMD "cross-shell pack"
	done
}

case "$1" in
	setup)
		[ -n "$SKIP_LIST" ] && echo "WARNING!!! Skipping broken packages: $SKIP_LIST" >&2
		dev_bootstrap
		configure_target
		copy_tools
		configure_apt
		dev_install $PKGLIST
		add_user
		configure_tools
		;;
	bootstrap)
		bootstrap_host
		bootstrap_target
		;;
	maintainer-setup)
		dev_bootstrap
		configure_target
		copy_tools
		configure_apt
		dev_install $MAINTAINER_PKGLIST
		add_user
		configure_tools
		;;
	maintainer-build)
		$PRE_SLINDJOB_HOOK
		set -e
		sh /usr/lib/slind-core/slind-host-tools-bootstrap --build
		$CHROOTCMD "$CHROOTENV slindjob"
		$CHROOTCMD "sudo apt-get update"
		for ARCH in $ARCHES; do
			$CHROOTCMD "$CHROOTENV REPODIR=$GRASP_REPO mktpkg $ARCH $SUITE"
		done
		set +e
		$POST_SLINDJOB_HOOK
		;;
	*)
		echo "Usage: `basename $0` {setup|bootstrap|maintainer-setup|maintainer-build}"
		exit 1
		;;
esac
